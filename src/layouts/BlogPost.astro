---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import '../styles/global.css'
import '../styles/blog.css'
import '../styles/markdown.css';
import BackArrow from "../components/BackArrow.astro";
import readingTime from 'reading-time';
import Analytics from "../components/Analytics.astro";

export interface Props {
	content: {
		title: string;
		description: string;
		publishDate: string;
		astro: Record<string, any>;
		image?: {
			src: string;
			alt: string;
		};
	};
}

const contentColumnClass = "ml-10 mr-10 md:ml-44 md:mr-44 lg:ml-80 lg:mr-80";

const {
	content: { title, description, publishDate, image, astro },
} = Astro.props as Props;

const publishDateFormated = new Date(publishDate).toLocaleDateString('en-EN', { weekday: "long", year: "numeric", month: "short", day: "numeric" });
const readTime = readingTime(astro.html).text;
---

<html>

<head>
	<BaseHead title={title} description={description} />
	<Analytics />
</head>

<body class="dark:bg-dark-color">
	<Header />
	<article class="dark:text-dark-text-color">
		<header class="mb-0">
			<BackArrow />
			{image && (
			<img class="aspect-auto w-4/5 bg-white rounded-md shadow-lg sm:hidden" loading="lazy" src={image.src}
				alt={image.alt} />
			)}
			<div class={`${contentColumnClass} flex items-center`}>
				{image && (
				<img class="w-1/2 bg-white rounded-md shadow-lg hidden sm:block" loading="lazy" src={image.src}
					alt={image.alt} />
				)}
				<div>
					<h1 class="title">{title}</h1>
					<p class="text-gray-700 text-base">{description}</p>
					<div class="flex justify-center">
						<time>{publishDateFormated}</time>
						<p class="post-text text-gray-400 z-[1] ml-1 mr-1">â€¢</p>
						<p class="text-gray-700 text-base">{readTime}</p>
					</div>
				</div>
			</div>
		</header>
		<main class={`${contentColumnClass} mb-10 markdown-css dark:text-dark-text-color`}>
			<slot></slot>
		</main>
	</article>
</body>

</html>

<style>
	img {
		width: 100vw;
		object-fit: cover;
		object-position: center;
		margin-top: 2rem;
		margin-bottom: 4rem;
		max-width: 1280px;
	}
	header {
		display: flex;
		flex-direction: column;
		text-align: center;
		align-items: center;
		justify-content: center;
		gap: 1rem;

		padding-bottom: 2rem;
		margin-bottom: 2rem;
		border-bottom: 4px solid var(--theme-divider);
	}

	.title,
	time {
		margin: 0;
	}

	time {
		color: var(--theme-text-lighter);
	}

</style>

<script>
	const supportedTOCHeaders = ['h1', 'h2'];

	let lastActiveAnchor = null;
	function onScroll(){
		var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
		var anchors = Array.from(document.querySelector('body').querySelectorAll('*[id]')).filter(e => supportedTOCHeaders.includes(e.nodeName.toLocaleLowerCase())) as unknown as HTMLElement[];
		
		const activeAnchor = anchors.filter(e => e.offsetTop <= scrollTop + 100).pop() || lastActiveAnchor;
		const inactiveAnchors = anchors.filter(e => e !== activeAnchor);

		if (activeAnchor) {
			let activeAnchorId = activeAnchor.id;
			document.querySelector(`a[href="#${activeAnchorId}"]`).classList.toggle('active', true);
			lastActiveAnchor = activeAnchor;
		}

		inactiveAnchors.forEach((e) => {
			let activeAnchorId = e.id;
			document.querySelector(`a[href="#${activeAnchorId}"]`).classList.toggle('active', false);
		});
	}

	window.addEventListener('scroll', onScroll);
</script>